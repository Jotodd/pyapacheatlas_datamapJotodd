#
# NOTE - Run the command "az login" first so that your CLI is set up to connect to Purview as YOU.
#

import json
import os
import tkinter as tk
from tkinter import simpledialog
from tkinter import messagebox

root = tk.Tk()
root.withdraw()

from openpyxl import Workbook
from openpyxl import load_workbook

# PyApacheAtlas packages
# Connect to Atlas via a Service Principal
from pyapacheatlas.auth import ServicePrincipalAuthentication
from pyapacheatlas.core import PurviewClient, AtlasEntity
from pyapacheatlas.readers import ExcelConfiguration, ExcelReader

# Connect to Atlas via az login
from azure.identity import AzureCliCredential

cred = AzureCliCredential()

if __name__ == "__main__":
    # Inputs for AccountName and File Location
    acctname=simpledialog.askstring("Purview Privacy Private Preview", "Please enter the azure account name?", parent=root)
    client = PurviewClient( account_name = acctname, authentication = cred)
   
    # SETUP: This is just setting up the excel file for you
    file_path = simpledialog.askstring("Purview Privacy Private Preview", "Please enter the file path?", parent=root)
    excel_config = ExcelConfiguration()
    excel_reader = ExcelReader(excel_config)

  

    # ACTUAL WORK:
    # Parse your custom type def
    typedefs = excel_reader.parse_entity_defs(file_path)
    
    # force_update to True so it's easier to repeat this step
    _ = client.upload_typedefs(typedefs, force_update=True)
    
    # First extract the
    tables_cols = excel_reader.parse_bulk_entities(file_path)
    table_col_results = client.upload_entities(tables_cols)

    # This parses our excel file and creates a batch to upload
    lineage_with_mapping_processes = excel_reader.parse_update_lineage_with_mappings(file_path)

    # This is what is getting sent to your Atlas server
    lineage_results = client.upload_entities(lineage_with_mapping_processes)

    print(json.dumps([table_col_results, lineage_results], indent=2))

    messagebox.showinfo("Purview Privacy", "Data Map Created Succesfully")

